Index: sankore/Sankore-3.1/src/tools/UBGraphicsAristo.h
===================================================================
--- sankore.orig/Sankore-3.1/src/tools/UBGraphicsAristo.h	2013-03-07 20:08:11.819607252 +0100
+++ sankore/Sankore-3.1/src/tools/UBGraphicsAristo.h	2013-03-07 20:08:11.803607254 +0100
@@ -18,6 +18,13 @@
  * You should have received a copy of the GNU General Public License
  * along with Open-Sankoré.  If not, see <http://www.gnu.org/licenses/>.
  */
+
+#ifndef UBGRAPHICSARISTO_H_
+#define UBGRAPHICSARISTO_H_
+
+#include "core/UB.h"
+#include "domain/UBItem.h"
+#include "domain/UBGraphicsScene.h"
 #include "tools/UBAbstractDrawRuler.h"
 
 #include <QtGlobal>
@@ -45,7 +52,7 @@
     virtual ~UBGraphicsAristo();
 
     enum {
-        Type = UBGraphicsItemType::AristoItemType 
+        Type = UBGraphicsItemType::AristoItemType
     };
 
     enum Tool {
@@ -65,7 +72,7 @@
         Undefined
     };
     
-    void setOrientation(Orientation orientation);       
+    void setOrientation(Orientation orientation);
 
     virtual UBItem* deepCopy() const;
     virtual void copyItemParameters(UBItem *copy) const;
@@ -91,10 +98,10 @@
     virtual QRectF closeButtonRect() const;
     QRectF hFlipRect() const;
     QRectF markerButtonRect() const;
-    QRectF resizeButtonRect () const;        
+    QRectF resizeButtonRect () const;
     QRectF rotateRect() const;
 
-    QCursor flipCursor() const;        
+    QCursor flipCursor() const;
     QCursor markerCursor() const;
     QCursor resizeCursor() const;
 
@@ -124,7 +131,7 @@
     inline qreal radius () const
     {
         return sqrt(((B.x() - A.x())*(B.x() - A.x()))+((B.y() - A.y())*(B.y() - A.y()))) * 9 / 16 - 20;
-    }        
+    }
 
     bool mMarking;
     bool mResizing;
@@ -141,13 +148,14 @@
     QGraphicsSvgItem* mHFlipSvgItem;
     QGraphicsSvgItem* mMarkerSvgItem;
     QGraphicsSvgItem* mResizeSvgItem;
-    QGraphicsSvgItem* mRotateSvgItem;      
+    QGraphicsSvgItem* mRotateSvgItem;
 
     QPointF A, B, C;
     
     static const int sArcAngleMargin = 5;
-    static const Orientation sDefaultOrientation;        
+    static const Orientation sDefaultOrientation;
     static const QRectF sDefaultRect;
 };
 
 #endif /* UBGRAPHICSARISTO_H_ */
+
Index: sankore/Sankore-3.1/src/tools/UBGraphicsAristo.cpp
===================================================================
--- sankore.orig/Sankore-3.1/src/tools/UBGraphicsAristo.cpp	2013-03-07 20:08:11.819607252 +0100
+++ sankore/Sankore-3.1/src/tools/UBGraphicsAristo.cpp	2013-03-07 20:08:11.811607255 +0100
@@ -18,6 +18,13 @@
  * You should have received a copy of the GNU General Public License
  * along with Open-Sankoré.  If not, see <http://www.gnu.org/licenses/>.
  */
+
+#include "UBGraphicsAristo.h"
+#include "board/UBBoardController.h"
+#include "board/UBDrawingController.h"
+#include "core/UBApplication.h"
+#include "domain/UBGraphicsScene.h"
+
 #include <QColor>
 #include <QFont>
 #include <QFontMetricsF>
@@ -29,7 +36,7 @@
 
 #include "core/memcheck.h"
 
-const QRectF UBGraphicsAristo::sDefaultRect =  QRectF(0, 0, 800, 500);
+const QRectF UBGraphicsAristo::sDefaultRect = QRectF(0, 0, 800, 500);
 const UBGraphicsAristo::Orientation UBGraphicsAristo::sDefaultOrientation = UBGraphicsAristo::Top;
 
 UBGraphicsAristo::UBGraphicsAristo()
@@ -78,9 +85,9 @@
 }
 
 /*
- * setOrientation() modify the tool orientation.
- * Apexes coordinates are alors recomputed.
- */
+* setOrientation() modify the tool orientation.
+* Apexes coordinates are alors recomputed.
+*/
 void UBGraphicsAristo::setOrientation(Orientation orientation)
 {
     /* substracting difference to zero [2pi] twice, to obtain the desired angle */
@@ -96,9 +103,9 @@
 }
 
 /* calculatePoints() is used to calculate polygon's apexes coordinates.
- * This function handles orientation changes too.
- * Items are repositionated and path is redeterminates.
- */
+* This function handles orientation changes too.
+* Items are repositionated and path is redeterminates.
+*/
 void UBGraphicsAristo::calculatePoints(QRectF bounds)
 {
     switch (mOrientation) {
@@ -131,24 +138,24 @@
 }
 
 /*
- * setItemsPos() places control items according to A, B and C positions.
- * Call this function after A, B or C position modification, mostly after calling calculatePoints().
- * These positions has to be set when calling setPath() to allow hover events on items which are not into the main polygon.
- */
+* setItemsPos() places control items according to A, B and C positions.
+* Call this function after A, B or C position modification, mostly after calling calculatePoints().
+* These positions has to be set when calling setPath() to allow hover events on items which are not into the main polygon.
+*/
 void UBGraphicsAristo::setItemsPos()
 {
     mCloseSvgItem->setPos(closeButtonRect().topLeft() + rotationCenter());
     mHFlipSvgItem->setPos(hFlipRect().topLeft() + rotationCenter());
     mRotateSvgItem->setPos(rotateRect().topLeft() + rotationCenter());
-    mResizeSvgItem->setPos(resizeButtonRect().topLeft() + rotationCenter()); 
+    mResizeSvgItem->setPos(resizeButtonRect().topLeft() + rotationCenter());
     mMarkerSvgItem->setPos(markerButtonRect().topLeft() + rotationCenter());
 }
 
 /*
- * determinePath() modify the shape according to apexes coordinates and control item positions.
- * This is useful when orientation is modified.
- * Returns the painter path corresponding to object parameters.
- */
+* determinePath() modify the shape according to apexes coordinates and control item positions.
+* This is useful when orientation is modified.
+* Returns the painter path corresponding to object parameters.
+*/
 QPainterPath UBGraphicsAristo::determinePath()
 {
     QPainterPath path;
@@ -210,7 +217,7 @@
 {
     UBGraphicsAristo* cp = dynamic_cast<UBGraphicsAristo*>(copy);
     if (cp)
-    {   
+    {
         /* TODO: copy all members */
         cp->setPos(this->pos());
         cp->setTransform(this->transform());
@@ -233,7 +240,7 @@
     polygon.clear();
 
     paintGraduations(painter);
-    paintMarker(painter);    
+    paintMarker(painter);
 }
 
 QBrush UBGraphicsAristo::fillBrush() const
@@ -330,9 +337,9 @@
 void UBGraphicsAristo::paintProtractorGraduations(QPainter* painter)
 {
     /* defining useful constants */
-    const int  tenDegreeGraduationLength = 15;
+    const int tenDegreeGraduationLength = 15;
     const int fiveDegreeGraduationLength = 10;
-    const int  oneDegreeGraduationLength = 5;
+    const int oneDegreeGraduationLength = 5;
 
     painter->save();
 
@@ -449,7 +456,7 @@
     }
     
     /* getting intersection point to draw the wanted line */
-    QLineF intersectedLine(rotationCenter(), QPointF(rotationCenter().x()+co, rotationCenter().y()+si)); 
+    QLineF intersectedLine(rotationCenter(), QPointF(rotationCenter().x()+co, rotationCenter().y()+si));
     QPointF intersectionPoint;
     if (intersectedLine.intersect(QLineF(referencePoint, C), &intersectionPoint))
         painter->drawLine(QLineF(intersectionPoint, rotationCenter()));
@@ -527,9 +534,9 @@
     return QRectF (radius()/2 - mMarkerSvgItem->boundingRect().width(), y, mMarkerSvgItem->boundingRect().width(), mMarkerSvgItem->boundingRect().height());
 }
 
-QRectF  UBGraphicsAristo::resizeButtonRect() const
+QRectF UBGraphicsAristo::resizeButtonRect() const
 {
-    return QRectF((B - rotationCenter()).x() - 100 - mResizeSvgItem->boundingRect().width()/2, - mResizeSvgItem->boundingRect().height()/2, mResizeSvgItem->boundingRect().width(), mResizeSvgItem->boundingRect().height());   
+    return QRectF((B - rotationCenter()).x() - 100 - mResizeSvgItem->boundingRect().width()/2, - mResizeSvgItem->boundingRect().height()/2, mResizeSvgItem->boundingRect().width(), mResizeSvgItem->boundingRect().height());
 }
 
 QRectF UBGraphicsAristo::rotateRect() const
@@ -648,7 +655,7 @@
             hide();
             emit hidden();
             break;
-        case HorizontalFlip:            
+        case HorizontalFlip:
             /* setting new orientation */
             switch(mOrientation) {
             case Bottom:
@@ -676,7 +683,7 @@
 {
     UBStylusTool::Enum currentTool = (UBStylusTool::Enum)UBDrawingController::drawingController ()->stylusTool ();
 
-    if (currentTool == UBStylusTool::Selector)  {
+    if (currentTool == UBStylusTool::Selector) {
         mShowButtons = true;
         mHFlipSvgItem->setVisible(true);
         mRotateSvgItem->setVisible(true);
@@ -707,7 +714,7 @@
         event->accept();
         update();
 
-    } else if (UBDrawingController::drawingController()->isDrawingTool())  {
+    } else if (UBDrawingController::drawingController()->isDrawingTool()) {
             setCursor(drawRulerLineCursor());
             UBDrawingController::drawingController()->mActiveRuler = this;
             event->accept();
@@ -767,10 +774,10 @@
 }
 
 /*
- * toolfromPos() returns the item type corresponding to the given position.
- * This method is used to reduce the amount of code in each event function and improve class' maintainability.
- * pos: event's position ; a rotation is done to counter elements rotation, like the marker button.
- */ 
+* toolfromPos() returns the item type corresponding to the given position.
+* This method is used to reduce the amount of code in each event function and improve class' maintainability.
+* pos: event's position ; a rotation is done to counter elements rotation, like the marker button.
+*/
 UBGraphicsAristo::Tool UBGraphicsAristo::toolFromPos(QPointF pos)
 {
     pos = pos - rotationCenter();
@@ -849,3 +856,4 @@
 {
     return static_cast<UBGraphicsScene*>(QGraphicsPathItem::scene());
 }
+
